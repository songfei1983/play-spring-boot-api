version: '3.8'

services:
  # Spring Boot API服务
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: play-spring-boot-api
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - SPRING_DATA_MONGODB_URI=mongodb://admin:password123@mongodb:27017/openrtb?authSource=admin
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_PASSWORD=redis123
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # React前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: play-react-frontend
    ports:
      - "3000:80"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # MongoDB 数据库
  mongodb:
    image: mongo:7.0
    container_name: openrtb-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: openrtb
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongodb-init.js:/docker-entrypoint-initdb.d/mongodb-init.js:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis 缓存
  redis:
    image: redis:7.2-alpine
    container_name: openrtb-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MongoDB Express (可选的Web管理界面)
  mongo-express:
    image: mongo-express:1.0.0
    container_name: openrtb-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - management

  # Redis Commander (可选的Redis管理界面)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: openrtb-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis123
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - management

networks:
  app-network:
    driver: bridge

volumes:
  # 应用数据卷
  app-data:
    driver: local
  # MongoDB数据卷
  mongodb_data:
    driver: local
  # Redis数据卷
  redis_data:
    driver: local

# 使用说明:
# 1. 启动所有服务: docker-compose up -d
# 2. 启动包含管理界面的服务: docker-compose --profile management up -d
# 3. 仅启动核心服务(API+前端+数据库): docker-compose up -d api frontend mongodb redis
# 4. 查看日志: docker-compose logs -f
# 5. 停止服务: docker-compose down
# 6. 清理数据: docker-compose down -v
#
# 访问地址:
# - API服务: http://localhost:8080
# - 前端应用: http://localhost:3000
# - MongoDB: mongodb://admin:password123@localhost:27017/openrtb
# - Redis: redis://localhost:6379 (密码: redis123)
# - Mongo Express: http://localhost:8081 (用户名/密码: admin/admin123) [需要--profile management]
# - Redis Commander: http://localhost:8082 (用户名/密码: admin/admin123) [需要--profile management]