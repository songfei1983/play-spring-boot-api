name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [17, 21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: ./mvnw clean test
      
    - name: Generate test coverage report
      run: ./mvnw jacoco:report
      
    - name: Upload coverage reports to Codecov
      if: matrix.java-version == '17'
      uses: codecov/codecov-action@v4
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Build application
      run: ./mvnw clean compile
      
    - name: Package application
      if: matrix.java-version == '17'
      run: ./mvnw clean package -DskipTests
      
    - name: Upload build artifacts
      if: matrix.java-version == '17'
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: target/*.jar
        
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests with coverage
      run: ./mvnw clean test jacoco:report
      
    - name: SonarCloud Scan
      if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ "$SONAR_TOKEN" != "" ]; then
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=play-spring-boot-api \
            -Dsonar.organization=your-org \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN
        else
          echo "SonarCloud analysis skipped - SONAR_TOKEN not available"
        fi
        
  security-scan-quick:
    name: Quick Security Scan
    runs-on: ubuntu-latest
    needs: test
    # Âú®Èùû‰∏ªÂàÜÊîØËøêË°åÂø´ÈÄüÊâ´Êèè
    if: |
      github.ref != 'refs/heads/master' && 
      github.ref != 'refs/heads/develop' && 
      !contains(github.event.head_commit.message, '[security]') &&
      !contains(toJSON(github.event.head_commit.modified), 'pom.xml')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Cache OWASP Dependency Check data
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository/org/owasp/dependency-check-data
        key: ${{ runner.os }}-owasp-data-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-owasp-data-
        
    - name: Run Quick OWASP Check (High Severity Only)
      run: |
        ./mvnw org.owasp:dependency-check-maven:check \
          -DfailBuildOnCVSS=9 \
          -DsuppressionsLocation=.github/dependency-check-suppressions.xml \
          -DdataDirectory=~/.m2/repository/org/owasp/dependency-check-data \
          -DautoUpdate=false \
          -DcveValidForHours=24 \
          -DskipTestScope=true \
          -DskipProvidedScope=true \
          -DskipSystemScope=true \
          -DretireJsAnalyzerEnabled=false \
          -DnodeAnalyzerEnabled=false \
          -DassemblyAnalyzerEnabled=false \
          -DarchiveAnalyzerEnabled=false \
          -DjarAnalyzerEnabled=true \
          -DnuspecAnalyzerEnabled=false || true
          
    - name: Upload Quick Security Scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quick-security-scan-report
        path: target/dependency-check-report.html
        
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    # Âè™Âú®‰∏ªÂàÜÊîØ„ÄÅÂºÄÂèëÂàÜÊîØÊàñÂåÖÂê´ÂÆâÂÖ®Áõ∏ÂÖ≥Êõ¥ÊîπÊó∂ËøêË°åÂÆåÊï¥Êâ´Êèè
    if: |
      github.ref == 'refs/heads/master' || 
      github.ref == 'refs/heads/develop' || 
      contains(github.event.head_commit.message, '[security]') ||
      contains(toJSON(github.event.head_commit.modified), 'pom.xml')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Cache OWASP Dependency Check data
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository/org/owasp/dependency-check-data
        key: ${{ runner.os }}-owasp-data-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-owasp-data-
        
    - name: Run OWASP Dependency Check (Optimized)
      run: |
        ./mvnw org.owasp:dependency-check-maven:check \
          -DfailBuildOnCVSS=7 \
          -DsuppressionsLocation=.github/dependency-check-suppressions.xml \
          -DdataDirectory=~/.m2/repository/org/owasp/dependency-check-data \
          -DautoUpdate=false \
          -DcveValidForHours=24 \
          -DskipTestScope=true \
          -DskipProvidedScope=true \
          -DskipSystemScope=true \
          -DretireJsAnalyzerEnabled=false \
          -DnodeAnalyzerEnabled=false \
          -DassemblyAnalyzerEnabled=false || true
          
    - name: Upload OWASP Dependency Check results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-report
        path: target/dependency-check-report.html
        
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 45
    # Âè™Âú®‰∏ªÂàÜÊîØÊàñPRÂà∞‰∏ªÂàÜÊîØÊó∂ËøêË°åE2EÊµãËØïÔºå‰∏îÊµãËØïÈÄöËøá
    if: |
      (needs.test.result == 'success') &&
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || 
       github.base_ref == 'master' || github.base_ref == 'develop')
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: openrtb
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.runCommand({ping: 1}).ok' --host localhost:27017"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 10
          --health-start-period 10s
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Install Playwright Browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Build backend JAR
      run: |
        ./mvnw clean package -DskipTests
        echo "Backend JAR built successfully"
    
    - name: Verify MongoDB readiness
      run: |
        echo "üîç Verifying MongoDB service health..."
        
        # Á≠âÂæÖMongoDBÂÆπÂô®ÂÅ•Â∫∑Ê£ÄÊü•ÈÄöËøá
        echo "Waiting for MongoDB container health check..."
        for i in {1..30}; do
          if docker ps --filter "name=mongodb" --filter "health=healthy" | grep -q mongodb; then
            echo "‚úÖ MongoDB container is healthy"
            break
          fi
          echo "‚è≥ Attempt $i/30: MongoDB container not healthy yet, waiting..."
          sleep 2
        done
        
        # È™åËØÅÁ´ØÂè£ËøûÈÄöÊÄß
        echo "üîå Testing port connectivity..."
        timeout 30 bash -c 'until nc -z localhost 27017; do echo "Waiting for port 27017..."; sleep 1; done'
        echo "‚úÖ Port 27017 is accessible"
        
        # È™åËØÅMongoDBÊúçÂä°ÂìçÂ∫î
        echo "üóÑÔ∏è Testing MongoDB service response..."
        for i in {1..10}; do
          if mongosh --quiet --eval "db.runCommand({ping: 1}).ok" localhost:27017/test >/dev/null 2>&1; then
            echo "‚úÖ MongoDB service is responding"
            break
          fi
          echo "‚è≥ Attempt $i/10: MongoDB not responding yet, waiting..."
          sleep 2
        done
        
        # ÂàõÂª∫ÊµãËØïÊï∞ÊçÆÂ∫ì
        echo "üìä Initializing test database..."
        mongosh --quiet localhost:27017/openrtb --eval "db.test.insertOne({test: true}); db.test.deleteOne({test: true});"
        echo "‚úÖ MongoDB is fully ready for E2E tests"
    
    - name: Start and verify backend server
      run: |
        echo "üöÄ Starting backend server..."
        
        # ÂêØÂä®ÂêéÁ´ØÊúçÂä°
        nohup java -jar target/*.jar --spring.profiles.active=mongodb \
          --server.port=8080 \
          --logging.level.org.springframework.data.mongodb=INFO \
          --management.endpoints.web.exposure.include=health,info \
          > backend.log 2>&1 &
        echo $! > backend.pid
        
        echo "üìã Backend PID: $(cat backend.pid)"
        echo "‚è≥ Waiting for backend server to start..."
        
        # ÂàÜÈò∂ÊÆµÈ™åËØÅÂêéÁ´ØÂêØÂä®
        # Èò∂ÊÆµ1: Á≠âÂæÖËøõÁ®ãÂêØÂä®
        sleep 5
        if ! kill -0 $(cat backend.pid) 2>/dev/null; then
          echo "‚ùå Backend process failed to start"
          cat backend.log
          exit 1
        fi
        echo "‚úÖ Backend process is running"
        
        # Èò∂ÊÆµ2: Á≠âÂæÖÁ´ØÂè£ÁõëÂê¨
        echo "üîå Waiting for port 8080 to be available..."
        timeout 60 bash -c 'until nc -z localhost 8080; do echo "Waiting for port 8080..."; sleep 2; done'
        echo "‚úÖ Port 8080 is accessible"
        
        # Èò∂ÊÆµ3: Á≠âÂæÖÂÅ•Â∫∑Ê£ÄÊü•ÈÄöËøá
        echo "üè• Waiting for health check to pass..."
        for i in {1..24}; do
          if curl -f -s http://localhost:8080/actuator/health >/dev/null 2>&1; then
            echo "‚úÖ Backend health check passed"
            break
          fi
          echo "‚è≥ Attempt $i/24: Health check not ready, waiting..."
          sleep 5
        done
        
        # È™åËØÅÂÅ•Â∫∑Áä∂ÊÄÅ
        health_status=$(curl -s http://localhost:8080/actuator/health | jq -r '.status' 2>/dev/null || echo "UNKNOWN")
        if [ "$health_status" != "UP" ]; then
          echo "‚ùå Backend health check failed. Status: $health_status"
          echo "üìã Backend logs:"
          tail -50 backend.log
          exit 1
        fi
        
        echo "‚úÖ Backend server is fully ready for E2E tests"
    
    - name: Run Playwright E2E tests
      working-directory: ./frontend
      run: |
        echo "üé≠ Starting Playwright E2E tests..."
        npm run test:e2e
        echo "‚úÖ E2E tests completed successfully"
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 7
    
    - name: Upload backend logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: backend-logs
        path: backend.log
        retention-days: 3
    
    - name: Cleanup servers
      if: always()
      run: |
        echo "üßπ Cleaning up services..."
        
        # ÂÅúÊ≠¢ÂêéÁ´ØÊúçÂä°
        if [ -f backend.pid ]; then
          backend_pid=$(cat backend.pid)
          if kill -0 $backend_pid 2>/dev/null; then
            echo "Stopping backend server (PID: $backend_pid)..."
            kill $backend_pid
            # Á≠âÂæÖËøõÁ®ã‰ºòÈõÖÂÖ≥Èó≠
            for i in {1..10}; do
              if ! kill -0 $backend_pid 2>/dev/null; then
                echo "‚úÖ Backend server stopped gracefully"
                break
              fi
              sleep 1
            done
            # Âº∫Âà∂ÁªàÊ≠¢Â¶ÇÊûúËøòÂú®ËøêË°å
            if kill -0 $backend_pid 2>/dev/null; then
              echo "Force killing backend server..."
              kill -9 $backend_pid || true
            fi
          fi
          rm -f backend.pid
        fi
        
        echo "‚úÖ Cleanup completed"