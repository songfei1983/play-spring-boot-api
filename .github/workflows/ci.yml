name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [17, 21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: ./mvnw clean test
      
    - name: Generate test coverage report
      run: ./mvnw jacoco:report
      
    - name: Upload coverage reports to Codecov
      if: matrix.java-version == '17'
      uses: codecov/codecov-action@v4
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Build application
      run: ./mvnw clean compile
      
    - name: Package application
      if: matrix.java-version == '17'
      run: ./mvnw clean package -DskipTests
      
    - name: Upload build artifacts
      if: matrix.java-version == '17'
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: target/*.jar
        
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests with coverage
      run: ./mvnw clean test jacoco:report
      
    - name: SonarCloud Scan
      if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ "$SONAR_TOKEN" != "" ]; then
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=play-spring-boot-api \
            -Dsonar.organization=your-org \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN
        else
          echo "SonarCloud analysis skipped - SONAR_TOKEN not available"
        fi
        
  security-scan-quick:
    name: Quick Security Scan
    runs-on: ubuntu-latest
    needs: test
    # 在非主分支运行快速扫描
    if: |
      github.ref != 'refs/heads/master' && 
      github.ref != 'refs/heads/develop' && 
      !contains(github.event.head_commit.message, '[security]') &&
      !contains(toJSON(github.event.head_commit.modified), 'pom.xml')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Cache OWASP Dependency Check data
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository/org/owasp/dependency-check-data
        key: ${{ runner.os }}-owasp-data-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-owasp-data-
        
    - name: Run Quick OWASP Check (High Severity Only)
      run: |
        ./mvnw org.owasp:dependency-check-maven:check \
          -DfailBuildOnCVSS=9 \
          -DsuppressionsLocation=.github/dependency-check-suppressions.xml \
          -DdataDirectory=~/.m2/repository/org/owasp/dependency-check-data \
          -DautoUpdate=false \
          -DcveValidForHours=24 \
          -DskipTestScope=true \
          -DskipProvidedScope=true \
          -DskipSystemScope=true \
          -DretireJsAnalyzerEnabled=false \
          -DnodeAnalyzerEnabled=false \
          -DassemblyAnalyzerEnabled=false \
          -DarchiveAnalyzerEnabled=false \
          -DjarAnalyzerEnabled=true \
          -DnuspecAnalyzerEnabled=false || true
          
    - name: Upload Quick Security Scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quick-security-scan-report
        path: target/dependency-check-report.html
        
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    # 只在主分支、开发分支或包含安全相关更改时运行完整扫描
    if: |
      github.ref == 'refs/heads/master' || 
      github.ref == 'refs/heads/develop' || 
      contains(github.event.head_commit.message, '[security]') ||
      contains(toJSON(github.event.head_commit.modified), 'pom.xml')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Cache OWASP Dependency Check data
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository/org/owasp/dependency-check-data
        key: ${{ runner.os }}-owasp-data-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-owasp-data-
        
    - name: Run OWASP Dependency Check (Optimized)
      run: |
        ./mvnw org.owasp:dependency-check-maven:check \
          -DfailBuildOnCVSS=7 \
          -DsuppressionsLocation=.github/dependency-check-suppressions.xml \
          -DdataDirectory=~/.m2/repository/org/owasp/dependency-check-data \
          -DautoUpdate=false \
          -DcveValidForHours=24 \
          -DskipTestScope=true \
          -DskipProvidedScope=true \
          -DskipSystemScope=true \
          -DretireJsAnalyzerEnabled=false \
          -DnodeAnalyzerEnabled=false \
          -DassemblyAnalyzerEnabled=false || true
          
    - name: Upload OWASP Dependency Check results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-report
        path: target/dependency-check-report.html
        
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 60
    # 只在主分支或PR到主分支时运行E2E测试，且测试通过
    if: |
      (needs.test.result == 'success') &&
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || 
       github.base_ref == 'master' || github.base_ref == 'develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Install Playwright Browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps
    
    - name: Build backend JAR
      run: |
        ./mvnw clean package -DskipTests
        echo "Backend JAR built successfully"
    
    - name: Start backend server
      run: |
        java -jar target/*.jar &
        echo $! > backend.pid
        # 等待后端服务启动
        timeout 120 bash -c 'until curl -f http://localhost:8080/actuator/health 2>/dev/null; do echo "Waiting for backend..."; sleep 5; done'
        echo "Backend server started successfully"
    
    - name: Start frontend dev server
      working-directory: ./frontend
      run: |
        BROWSER=none npm start &
        echo $! > frontend.pid
        # 等待前端服务启动
        timeout 120 bash -c 'until curl -f http://localhost:3000 2>/dev/null; do echo "Waiting for frontend..."; sleep 5; done'
        echo "Frontend server started successfully"
    
    - name: Run Playwright tests
      working-directory: ./frontend
      run: npm run test:e2e
    
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: frontend/test-results/
        retention-days: 30
    
    - name: Stop servers
      if: always()
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
        fi
        if [ -f frontend/frontend.pid ]; then
          kill $(cat frontend/frontend.pid) || true
        fi